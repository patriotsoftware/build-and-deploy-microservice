name: 'Build and Deploy Microservice'
author: DevOps
description: 'Build and Deploy Microservice.'

inputs:
  # AWS Authentication
  aws-access-key-id:
    description: 'AWS Access Key ID to authenticate for deploying to ECR and the desired EKS cluster.'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key to authenticate for deploying to ECR and the desired EKS cluster.'
    required: true
  aws-region:
    description: 'Region used for ECR login.'
    required: false
    default: 'us-east-1'
  # Docker Configuration
  dockerfile-path:
    description: 'Path to the Dockerfile to build.'
    required: true
  docker-context:
    description: 'The Docker context to build the Dockerfile from. Default is "."'
    required: false
    default: '.'
  docker-build-args:
    description: 'Additional Docker build args to pass to the Docker Build custom action.'
    required: false
  docker-extra-tag:
    description: 'Additional Docker tag to apply to the Docker image.'
    required: false
  # CDK Configuration
  deploy-cdk:
    description: 'Determine to deploy CDK or not. Default is "false".'
    required: false
    default: 'false'
  cdk-directory:
    description: 'The directory to deploy CDK from. Default is "deploy".'
    required: false
    default: 'deploy'
  # Helm Configuration
  release-name:
    description: 'Name of Helm Release. This is also used to build the ECR Repo name.'
    required: true
  helm-base-chart:
    description: 'Chart to deploy the service with.'
    required: false
    default: 'monochart'
  helm-target-directory:
    description: 'Target directory to save the chart to. This needs to be an empty directory so the chart can be specified automatically. Will save to ./helm-chart/<chart name>.'
    required: false
    default: './helm-chart/'
  helm-chart-version:
    description: 'Helm Chart version.'
    required: false
  helm-namespace:
    description: 'Kubernetes Namespace for the deployment. Default will use the same name as the release-name.'
    required: false
    default: ''
  helm-values-file-directory:
    description: 'The Director that holds the Helm Values file for the deployment. Default is "./deploy/helm".'
    required: false
    default: './deploy/helm'
  helm-values-file-name:
    description: 'The name of the Helm Values file for the Deployment. Default is "values.yaml".'
    required: false
    default: 'values.yaml'
  helm-additional-values:
    description: 'Comma seperated string that contains extra values set for helm.'
    required: false
  helm-additional-args:
    description: 'Handles inline options such as atomic, or timeout. By default, atomic is enabled.'
    required: false
    default: '--atomic --timeout 2m30s'
  helm-problems-timeout:
    description: 'Number of seconds to wait before checking potential issues (as an integer of seconds). Adding a value enables problem detection.'
    required: false
    default: '120'
  helm-print-template:
    description: 'Allowed values are true/false. Determines whether or not to run "helm template" with the specified values. Defaults to true.'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Extract Branch name and AWS Account ID
      id: core-values
      shell: bash
      run: |
        export UNESCAPED_BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "branch=$(echo ${UNESCAPED_BRANCH_NAME})" >> $GITHUB_OUTPUT
        echo "clean-branch=$(echo ${UNESCAPED_BRANCH_NAME} | sed 's/_//g' | tr '[:upper:]' '[:lower:]' | cut -c -38)" >> $GITHUB_OUTPUT
        echo "aws-account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

    - name: Set Job Values
      id: job-values
      shell: bash
      run: |
        if [[ "${{ steps.core-values.outputs.branch }}" =~ (main|master) ]]; then
          echo "ecr-repo=${{ inputs.release-name }}" >> $GITHUB_OUTPUT
        else
          echo "ecr-repo=$(echo ${{ inputs.release-name }}/${{ steps.core-values.outputs.clean-branch }})" >> $GITHUB_OUTPUT
        fi

    - name: Authenticate with AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Create ECR Repository
      shell: bash
      run: aws ecr create-repository --repository-name ${{ steps.job-values.outputs.ecr-repo }} || echo "Repository exists already. Skipping creation."

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker

    - name: Copy NuGet Config
      shell: bash
      run: cp /home/runner/.nuget/NuGet/NuGet.Config ./nuget.config

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        file: ${{ inputs.dockerfile-path }}
        context: ${{ inputs.docker-context }}
        push: true
        build-args: ${{ inputs.docker-build-args }}
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ steps.job-values.outputs.ecr-repo }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ steps.job-values.outputs.ecr-repo }}:latest

    - name: Deploy Additional Docker Tag
      if: ${{ inputs.docker-extra-tag != '' }}
      shell: bash
      run: |
        docker tag ${{ steps.login-ecr.outputs.registry }}/${{ steps.job-values.outputs.ecr-repo }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ steps.job-values.outputs.ecr-repo }}:${{ inputs.docker-extra-tag }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ steps.job-values.outputs.ecr-repo }}:${{ inputs.docker-extra-tag }}

    - name: Helm Install/Upgrade
      uses: patriotsoftware/helm-deployment@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        deploy-cdk: ${{ inputs.deploy-cdk }}
        cdk-directory: ${{ inputs.cdk-directory }}
        release-name: ${{ inputs.release-name }}
        helm-base-chart: ${{ inputs.helm-base-chart }}
        helm-target-directory: ${{ inputs.helm-target-directory }}
        helm-chart-version: ${{ inputs.helm-chart-version }}
        helm-namespace: ${{ inputs.helm-namespace }}
        helm-values-file-directory: ${{ inputs.helm-values-file-directory }}
        helm-values-file-name: ${{ inputs.helm-values-file-name }}
        helm-additional-values: ${{ inputs.helm-additional-values }}
        helm-additional-args: ${{ inputs.helm-additional-args }}
        helm-problems-timeout: ${{ inputs.helm-problems-timeout }}
        helm-print-template: ${{ inputs.helm-print-template }}
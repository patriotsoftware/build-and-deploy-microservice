name: Deploy Microservice
description: Build and deploy a microservice to Kubernetes

inputs:
  service-name:
    description: The name of service, used for the release name and ECR Repository
    required: true
  dotnet-type:
    description: The dotnet environment variable required in the Dockerfile; aspnet or dotnet
    required: true
  environment: 
    description: The deployment environment; development, staging, or production
    required: true
  internal:
    description: Whether the app is internal or external. Default is internal, set to "false" for external
    required: false
    default: "true"
  aws-access-key-id:
    description: The AWS access key ID
    required: true
  aws-secret-access-key:
    description: The AWS secret access key
    required: true
  pull-through-aws-access-key-id:
    description: The AWS Account access key ID to pull the image from
    required: false
  pull-through-aws-secret-access-key:
    description: The AWS Account secret access key to pull the image from
    required: false
  pull-through-aws-region:
    description: Region for the ECR image used for the pull through
    required: false
    default: us-east-1
  dockerfile-path:
    description: The path to the Dockerfile for the microservice to be built and pushed
    required: false
  dockerfile-context:
    description: The context for the Dockerfile being built
    required: false
    default: .
  dockerfile-extra-args:
    description: Any additional arguments to be used with the 'docker build' command
    required: false
    default: ""
  helm-additional-args:
    description: Any extra arguments for the Helm install. Default; "--atomic --timeout 10m" (set to an empty string to override)
    required: false
    default: "--atomic --timeout 10m"
  domain:
    description: The domain name for the app. This is required for K6 tests. Default is set to 'patriotsoftware.com'
    required: false
    default: patriotsoftware.com
  swagger-prefix:
    description: Enter the prefix used for the Swagger endpoint for K6 testing. The default is 'v1'
    required: false
    default: v1
  k6-load-script-path:
    description: Location of the load test script to run with k6. Leave this empty to disable K6 tests
    required: false
  k6-load-flags:
    description: Additional flags to pass to the K6 command
    required: false
  k6-load-additional-mount:
    description: Additional mount point (directory) utilized by the K6 script
    required: false
  k6-performance-script-path:
    description: Location of the performance test script to run with k6. Leave this empty to disable K6 tests
    required: false
  k6-performance-flags:
    description: Additional flags to pass to the K6 command
    required: false
  k6-performance-additional-mount:
    description: Additional mount point (directory) utilized by the K6 script
    required: false
  k6-custom-script-path:
    description: Set the path to a specific K6 test to be run individually. This will negate the build and deploy process. This replaces the old K6 action
    required: false
  k6-custom-flags:
    description: Additional flags to pass to the K6 command
    required: false
  k6-custom-additional-mount:
    description: Additional mount point (directory) utilized by the K6 script
    required: false

runs:
  using: "composite"
  steps:
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        export UNESCAPED_BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "branch=$(echo ${UNESCAPED_BRANCH_NAME})" >> $GITHUB_OUTPUT
        echo "clean-branch=$(echo ${UNESCAPED_BRANCH_NAME} | sed 's/_//g' | tr '[:upper:]' '[:lower:]' | cut -c -38)" >> $GITHUB_OUTPUT

    # NuGet config file expected in runner image
    - name: Copy NuGet Config
      shell: bash
      run: cp /home/runner/.nuget/NuGet/NuGet.Config ./nuget.config

    - name: Environment Setup
      id: environment-setup
      shell: bash
      run: |
        # Set AWS Account ID
        echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

        # Set the Release name and ECR Repo name
        if [[ "${{ steps.extract_branch.outputs.branch }}" =~ (main|master) ]]; then
          echo "release=${{ inputs.service-name }}" >> $GITHUB_OUTPUT
          echo "ecr-repo=${{ inputs.service-name }}" >> $GITHUB_OUTPUT
        else
          echo "release=$(echo ${{ inputs.service-name }}-${{ steps.extract_branch.outputs.clean-branch }})" >> $GITHUB_OUTPUT
          echo "ecr-repo=$(echo ${{ inputs.service-name }}/${{ steps.extract_branch.outputs.clean-branch }})" >> $GITHUB_OUTPUT
        fi
        
        # Set the service type for dotnet
        if [[ "${{ inputs.dotnet-type }}" == "aspnet" ]]; then
          echo "dotnet-environment-type=env.base.ASPNETCORE_ENVIRONMENT" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.dotnet-type }}" == "dotnet" ]]; then
          echo "dotnet-environment-type=env.base.DOTNET_ENVIRONMENT" >> $GITHUB_OUTPUT
        else
          echo "Unsupported service type. Set 'dotnet-type' to either 'aspnet' or 'dotnet'."
          exit 1
        fi

        # Determine if the service is external or internal
        if [[ "${{ inputs.internal }}" == true ]]; then
          echo "visibility=internal" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.internal }}" == false ]]; then
          echo "visibility=external" >> $GITHUB_OUTPUT
        else
          echo "Unsupported input for 'internal' flag. Enter \"false\" for external or leave \"true\" for internal."
          exit 1
        fi

        case ${{ inputs.environment }} in
        dev)
          echo "environment=Development" >> $GITHUB_OUTPUT
          echo "account-name=psidev" >> $GITHUB_OUTPUT
          ;;
        staging)
          echo "environment=Staging" >> $GITHUB_OUTPUT
          echo "account-name=psistaging" >> $GITHUB_OUTPUT
          ;;
        prod)
          echo "environment=Production" >> $GITHUB_OUTPUT
          echo "account-name=psiprod" >> $GITHUB_OUTPUT
          ;;
        *)
          echo -n "Unsupported Account, available options; dev, staging, prod"
          exit 1
          ;;
        esac

    - name: Authenticate with AWS for Pull Through
      if:  ${{ inputs.dockerfile-path }} == "" && ${{ inputs.pull-through-aws-access-key-id }} && ${{ inputs.pull-through-aws-secret-access-key }} && ${{ inputs.k6-custom-script-path }} == ""
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.pull-through-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.pull-through-aws-secret-access-key }}
        aws-region: ${{ inputs.pull-through-aws-region }}

    - name: Login to Amazon ECR for Pull Through
      id: login-ecr
      if:  ${{ inputs.dockerfile-path }} == "" && ${{ inputs.pull-through-aws-access-key-id }} && ${{ inputs.pull-through-aws-secret-access-key }} && ${{ inputs.k6-custom-script-path }} == ""
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull image from Source AWS Account
      if:  ! ${{ inputs.dockerfile-path }} && ${{ inputs.pull-through-aws-access-key-id }} && ${{ inputs.pull-through-aws-secret-access-key }} && ${{ inputs.k6-custom-script-path }} == ""
      shell: bash
      run: |
        PULL_THROUGH_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
        # docker pull ${PULL_THROUGH_ACCOUNT_ID}.dkr.ecr.${{ inputs.pull-through-aws-region }}.amazonaws.com/${{ inputs.service-name }}:${{ github.sha }}
        # docker tag ${PULL_THROUGH_ACCOUNT_ID}.dkr.ecr.${{ inputs.pull-through-aws-region }}.amazonaws.com/${{ inputs.service-name }}:${{ github.sha }} ${{ inputs.service }}-pull-through-image
        docker pull ${PULL_THROUGH_ACCOUNT_ID}.dkr.ecr.${{ inputs.pull-through-aws-region }}.amazonaws.com/${{ inputs.service-name }}:latest
        docker tag ${PULL_THROUGH_ACCOUNT_ID}.dkr.ecr.${{ inputs.pull-through-aws-region }}.amazonaws.com/${{ inputs.service-name }}:latest ${{ inputs.service }}-pull-through-image

    - name: Authenticate with AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      if:  ${{ inputs.k6-custom-script-path }} == ""
      id: login-ecr-pull-through
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR Repository
      if:  ${{ inputs.k6-custom-script-path }} == ""
      shell: bash
      run: aws ecr create-repository --repository-name ${{ steps.environment-setup.outputs.ecr-repo }} || echo "Repository exists already. Skipping creation."

    - name: Build and Push image
      if: ${{ inputs.dockerfile-path }} && ${{ inputs.k6-custom-script-path }} == ""
      shell: bash
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:${{ github.sha }} ${{ inputs.dockerfile-extra-args }} -f ${{ inputs.dockerfile-path }} ${{ inputs.dockerfile-context }}
        docker tag ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:latest

    - name: Push ECR Image from Pull through
      if: ${{ inputs.dockerfile-path }} = "" && ${{ inputs.pull-through-aws-access-key-id }} && ${{ inputs.pull-through-aws-secret-access-key }} && ${{ inputs.k6-custom-script-path }} == ""
      shell: bash
      run: |
        docker tag ${{ inputs.service }}-pull-through-image ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:${{ github.sha }}
        docker tag ${{ inputs.service }}-pull-through-image ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ steps.environment-setup.outputs.ecr-repo }}:latest

    - name: Deploy CDK
      if:  ${{ inputs.k6-custom-script-path }} == ""
      env:
        AWS_ACCOUNT_ID: '${{ steps.environment-setup.outputs.account-id }}'
        AWS_REGION: 'us-east-1'
        BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
      shell: bash
      run: |
        cd deploy
        cdk deploy --require-approval never

    - name: Check For Branch Values File
      if: ${{ inputs.k6-custom-script-path }} == ""
      id: branch-values-file
      shell: bash
      run: |
        if [ -f ./deploy/helm/${{ steps.extract_branch.outputs.branch }}.values.yaml ]; then
          echo "Branch values file found"
          echo "values-file=./deploy/helm/values.yaml,./deploy/helm/${{ steps.extract_branch.outputs.branch }}.values.yaml" >> $GITHUB_OUTPUT;
        else
          echo "values-file=./deploy/helm/values.yaml" >> $GITHUB_OUTPUT;
        fi

    - name: Pull Helm Chart
      if:  ${{ inputs.k6-custom-script-path }} == ""
      id: pull-mono-chart
      uses: patriotsoftware/helm-oci-pull-action@v1
      with:
        aws-account-id: ${{ steps.environment-setup.outputs.account-id }}
        ecr-login: true
        chart-and-tag: ${{ steps.environment-setup.outputs.account-id }}.dkr.ecr.us-east-1.amazonaws.com/monochart:latest
        aws-region: us-east-1

    - name: Helm Upgrade/Install
      if:  ${{ inputs.k6-custom-script-path }} == ""
      with:
         base-chart: ./monochart
         namespace: time
         values-file: ${{ steps.branch-values-file.outputs.values-file }}
         additional-args: "${{ inputs.helm-additional-args }}"
         additional-values: "${{ steps.environment-setup.outputs.dotnet-environment-type }}=${{ steps.environment-setup.outputs.environment }},awsAccountName=${{ steps.environment-setup.outputs.account-name }},env.base.BRANCH_NAME=${{ steps.extract_branch.outputs.branch }},branchName=${{ steps.extract_branch.outputs.branch }},awsAccountNumber=${{ steps.environment-setup.outputs.account-id }},ecrTag=${{ github.sha }},env.branch.BRANCH_DATABASE=${{  steps.extract_branch.outputs.branch }}"
         release-name: ${{ steps.environment-setup.outputs.release }}
         problems-timeout: 120
      uses: patriotsoftware/helm-upgrade-action@v1

    - name: K6 Load Tests
      id: k6-load-tests
      if: ${{ inputs.k6-load-script-path }} && ${{ inputs.k6-custom-script-path }} == ""
      env:
        INPUT_BASE_URL_OVERRIDE: https://${{ steps.environment-setup.outputs.release }}.${{ inputs.environment }}-${{ steps.environment-setup.outputs.visibility }}.${{ inputs.domain }}/${{ inputs.swagger-prefix }}
        INPUT_K6_FLAGS: ${{ inputs.k6-load-flags }}
        INPUT_K6_SCRIPT: ${{ inputs.k6-load-script-path }}
        INPUT_ADDITIONAL_MOUNT: ${{ inputs.k6-load-additional-mount }}
      shell: bash
      run: ${{ github.action_path }}/k6-test-action.sh

    - name: K6 Performance Tests
      id: k6-performance-tests
      if: ${{ inputs.k6-performance-script-path }} && ${{ inputs.k6-custom-script-path }} == ""
      env:
        INPUT_BASE_URL_OVERRIDE: https://${{ steps.environment-setup.outputs.release }}.${{ inputs.environment }}-${{ steps.environment-setup.outputs.visibility }}.${{ inputs.domain }}/${{ inputs.swagger-prefix }}
        INPUT_K6_FLAGS: ${{ inputs.k6-performance-flags }}
        INPUT_K6_SCRIPT: ${{ inputs.k6-performance-script-path }}
        INPUT_ADDITIONAL_MOUNT: ${{ inputs.k6-performance-additional-mount }}
      shell: bash
      run: ${{ github.action_path }}/k6-test-action.sh

    - name: Custom K6 Test
      id: k6-custom-test
      if: ${{ inputs.k6-custom-script-path }}
      env: 
        INPUT_BASE_URL_OVERRIDE: https://${{ steps.environment-setup.outputs.release }}.${{ inputs.environment }}-${{ steps.environment-setup.outputs.visibility }}.${{ inputs.domain }}/${{ inputs.swagger-prefix }}
        INPUT_K6_FLAGS: ${{ inputs.k6-custom-flags }}
        INPUT_K6_SCRIPT: ${{ inputs.k6-custom-script-path }}
        INPUT_ADDITIONAL_MOUNT: ${{ inputs.k6-custom-additional-mount }}
      shell: bash
      run: ${{ github.action_path }}/k6-test-action.sh